const { client } = require("../src/requeriments");
const { delay, getChannel, channelCache } = require("./utils");

// Criar cole√ß√µes para armazenar em cache os canais e os membros
const nameChanges = new Map();

/**
* Realiza verifica√ß√µes e altera√ß√µes nos nomes dos canais de voz com base nas mudan√ßas de membros nos canais.
*  @param {VoiceChannel} oldChannel - O canal de voz antigo do membro.
*  @param {VoiceChannel} newChannel - O novo canal de voz do membro.
*  @returns {Promise<void>} - Uma Promise que √© resolvida ap√≥s as verifica√ß√µes e altera√ß√µes serem conclu√≠das.
*/
async function thinkVoiceChannelName( oldChannel, newChannel ) {
  // Verificar se o membro mudou para outro canal de voz
  if (oldChannel !== newChannel) {
    // Verificar se o membro entrou em um canal de voz
    if (newChannel) {
      // Verificar se o canal estava vazio antes
      if (oldChannel && oldChannel.members.size === 0) {
        const oldModifiedName = oldChannel.name.slice(1);
        nameChanges.set(oldChannel.id, "‚ö´" + oldModifiedName);
      }

      // Verificar se o canal n√£o estava marcado como verde
      const existingName = nameChanges.get(newChannel.id);
      if (!existingName || !existingName.startsWith("üü¢")) {
        // Verificar se h√° membros no canal ap√≥s 5 segundos
        await delay();
        if (newChannel.members.size > 0) {
          const newModifiedName = newChannel.name.slice(1);
          nameChanges.set(newChannel.id, "üü¢" + newModifiedName);
          await applyVoiceChannelName();
        } else {
          const newModifiedName = newChannel.name.slice(1);
          nameChanges.set(newChannel.id, "‚ö´" + newModifiedName);
        }
      }
    } else if (oldChannel && oldChannel.members.size === 0) {
      // Verificar se o canal estava vazio antes
      const oldModifiedName = oldChannel.name.slice(1);
      nameChanges.set(oldChannel.id, "‚ö´" + oldModifiedName);
    }
  } else if (newChannel && oldChannel && newChannel.members.size === 0 && oldChannel.members.size === 1) {
    // Verificar se o √∫ltimo membro saiu do canal ap√≥s 5 segundos
    await delay();
    const modifiedName = newChannel.name.slice(1);
    nameChanges.set(newChannel.id, "‚ö´" + modifiedName);
    await applyVoiceChannelName();
  }
}

/**
* Aplica as altera√ß√µes nos nomes dos canais de voz.
* @returns {Promise<void>} - Uma Promise que √© resolvida ap√≥s as altera√ß√µes serem aplicadas.
*/
async function applyVoiceChannelName() {
  const guild = client.guilds.cache.get(process.env.GUILD_ID);
  const changes = [];

  // Itera sobre as entradas do mapa de altera√ß√µes de nome
  for (const [channelId, newName] of nameChanges.entries()) {
    // Obt√©m o canal a partir do ID e do guild
    const channel = await getChannel(guild, channelId);
    
    if (channel) {
      // Adiciona a altera√ß√£o √† lista de altera√ß√µes
      changes.push({ id: channelId, name: newName });
      channel.setName(newName).catch(console.error);
    }
  }

  nameChanges.clear();
}

module.exports = {
  thinkVoiceChannelName,
  applyVoiceChannelName,
  nameChanges,
  channelCache,
  getChannel,
  delay,
};
